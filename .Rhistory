1+1
num [1:2, 1:2]
num [1:2, 1:2]1 2 3 4 5 6 7 8
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2)
View(example)
View(example)
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2)
sessionInfo()
install.packages("Kern")
install.packages("KernSmooth")
install.packages("KernSmooth R")
install.packages(c("ggplot2", "devtools", "lme4"))
install.packages(c("ggplot2", "devtools", "lme4"))
library(ggplot2)
install.packages(c("boot", "foreign", "KernSmooth", "mgcv", "nlme", "survival"))
install.packages(c("boot", "foreign", "KernSmooth", "mgcv", "nlme", "survival"))
library(devtools)
aes()
check()
install_github()
library(KernSmooth)
sessioninfo()
sessionInfo()
pwd
getwd
getwd()
getwd()
dir()
cd()
changedFiles()
quit
q
help()
q()
x<-Sys.time()
x
unclass(x)
as.POSIXlt(x)
x$sec
x$Sec
x$sec
p<-as.POSIXlt(x)
p
p$sec
class(p)
class(x)
swirl()
swirl
swirl()
swirl()
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x
y
print(R.version.string)
swirl()
library(swirl)
swirl()
swirl()
2
swirl()
library("shiny")
aunApp("shiny")
getwd
getwd()
setwd("~/Workbench/R")
aunApp("shiny")
runApp("shiny")
runApp("shiny")
runApp('shiny')
clear()
clc()
cls
f <- function(x) { x * 2}
x <- c(2,4,6,8,10)
lapply(x,f)
?runif
x<-1:4
x
lapply(x,runif)
sapply(x,runif)
x<-list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x, function(elt) elt[,1])
lapply(x, function(t) t[,1])
lapply(x, function(x) x[,1])
x
lapply(x, function(x) x[1,])
x<-c(12,56,4,345)
x
names(x)<-c("first","second","third","last")
x
attributes(x)
x["thirs"]
x["third"]
y<-matrix(x,2,2)
y
attr(y)
attributes(y)
y$dim<-NULL
y
str(apply(array, margin, ...))
str(apply)
str(mean)
x<-matrix(rnorm(200), 20, 10)
x
apply(x,1)
apply(x,1,function())
apply(x,1,function(x){x})
apply(x,2,function(x){x})
apply(x,2,{x})
apply(x,2,function(){})
apply(x,2,function(x){})
apply(x,2,function(x){x})
apply(x,3,function(x){x})
apply(x,1,function(x){x})
rnorm(2)
rnorm(100)
?mapply
?gl
x<-c(rnorm(10),runif(10,rnorm(10,1))
)\
x<-c(rnorm(10),runif(10),rnorm(10,1))
x
f<-gl(3,10)
f
norm(10)
rnorm(10)
runif(10)
rnorm(10,1)
rnorm(10,2)
rnorm(10,3)
rnorm(10,30)
rnorm(10,1)
gl(rnorm(10))
gl(4,10)
gl(4,1)
gl(100,2)
tapply(x,f,mean)
x
tapply(x,f,range)
viewinfo()
a<- list( str='R', vec=c(1,2,3), bool=TRUE )
a
a[1]
a[[1]]
a[[[1]]]
a[([[1]])]
a
a['bool']
a[['bool']
]
a[1]
class(a[[1]])
class(a[1])
class(a)
class(a$bool)
class(a[[1]])
class(a[[3]])
class(a[3])
View(example)
View(example)
View(viewinfo)
View(a)
x
length(x)
f1<-gl(6,5)
f2<-gl(15,2)
interaction(f1,f2)
split(x,f1,f2)
split(x,list(f1,f2))
split(x,list(f1,f2),drop=TRUE)
str(split(x,list(f1,f2),drop=TRUE))
str?
?str
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop=TRUE))
log(-1)
?invisible
?load
traceback()
?message
message("Hello message")
getwd()
source("debug.R")
debug(check)
check(12)
x
x
?recover
?browser
mean(x)
x<-NA
mean(x)
rm(x)
mean(x)
traceback()
check(x)
x
traceback
check(x)
lm(y-x)
traceback()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_color<-flags[,11:17]
flags_color<-flags[,11:17]
flags_colors<-flags[,11:17]
flag_colors<-flags[,11:17]
head(flag_colors)
rm(flags_colors)
rm(flags_color)
lapply(flag_colors,sum)
sapply(flags_color,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags[1,],length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,sum)
tapply(flags$population,flags$landmass,sum)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
?iris
iris
head(iris)
tapply(iris$Sepal.Length,iris$Species="virginica",mean)
?tapply
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
rowMeans(iris[,1:4])
data(mtcars)
force(mtcars)
sapply(mtcars,cyl,mean)
ytapply(mtcars$mpg,mtcars$cyl,mean())
tapply(mtcars$mpg,mtcars$cyl,mean())
tapply(mtcars$cyl,mtcars$mpg,mean())
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
209.21429-82.63636
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[,1:4],2,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
sapply(mtcars,cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
apply(mtcars,2,mean)
split(mtcars,mtcars$cyl)
lapply(mtcars,mean)
mean(mtcars$mpg,mtcars$cyl)
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
setwd("~/Documents/GitHub/ProgrammingAssignment2")
